//html

<div id="portfolio">
    
    <h1 class="title">My Portfolio</h1>
    
    <div id="app" class="container u-align-center u-clearfix u-palette-1-base index-2">

      
            <a href="Websites&Softwares.html">
              <card data-image="images/Websites&Softwares.png">
                <h1 slot="header">Websites & Softwares</h1>
                <p slot="content">Here I'll show and explain the process about the websites and softwares that I did.</p>
              </card>
            </a>

            <a href="Games&Projects.html">
              <card data-image="images/Games&Projects.jpg">
                <h1 slot="header">Games & Projects</h1>
                <p slot="content">Where my knowledge in programming and my creativity flows to create stuff that I love.</p>
              </card>
            </a>  

            <a href="Arts&Designs.html">  
              <card data-image="images/Arts&Designs.png">
                <h1 slot="header">Arts & Designs</h1>
                <p slot="content">Here is where stays my creativity, where I do some things not too relate to programming.</p>
              </card>
            </a>

            

        </div>
      </div>

//css

body {
    -webkit-font-smoothing: antialiased;
  }
  
  div#portfolio{
    background-color: #000;
    padding-top: 40px;
  }
  
  .title {
    font-family: "Raleway";
    font-size: 24px;
    font-weight: 700;
    color: #fff;
    text-align: center;
  }
  
  p {
    line-height: 1.5em;
  }
  
  h1 + p, p + p {
    margin-top: 10px;
  }
  
  .container {
    padding: 40px 80px;
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
  }
  
  .parallax-card-wrapper {
    margin: 10px;
    transform: perspective(800px);
    transform-style: preserve-3d;
    cursor: pointer;
  }
  .parallax-card-wrapper:hover .card-info {
    transform: translateY(0);
  }
  .parallax-card-wrapper:hover .card-info p {
    opacity: 1;
  }
  .parallax-card-wrapper:hover .card-info, .parallax-card-wrapper:hover .card-info p {
    transition: 0.6s cubic-bezier(0.23, 1, 0.32, 1);
  }
  .parallax-card-wrapper:hover .card-info:after {
    transition: 5s cubic-bezier(0.23, 1, 0.32, 1);
    opacity: 1;
    transform: translateY(0);
  }
  .parallax-card-wrapper:hover .card-bg {
    transition: 0.6s cubic-bezier(0.23, 1, 0.32, 1), opacity 5s cubic-bezier(0.23, 1, 0.32, 1);
    opacity: 0.8;
  }
  .parallax-card-wrapper:hover .card {
    transition: 0.6s cubic-bezier(0.23, 1, 0.32, 1), box-shadow 2s cubic-bezier(0.23, 1, 0.32, 1);
    box-shadow: rgba(255, 255, 255, 0.2) 0 0 40px 5px, white 0 0 0 1px, rgba(0, 0, 0, 0.66) 0 30px 60px 0, inset #333 0 0 0 5px, inset white 0 0 0 6px;
  }
  
  .card {
    position: relative;
    flex: 0 0 240px;
    width: 240px;
    height: 320px;
    background-color: #333;
    overflow: hidden;
    border-radius: 10px;
    box-shadow: rgba(0, 0, 0, 0.66) 0 30px 60px 0, inset #333 0 0 0 5px, inset rgba(255, 255, 255, 0.5) 0 0 0 6px;
    transition: 1s cubic-bezier(0.445, 0.05, 0.55, 0.95);
  }
  
  .card-bg {
    opacity: 0.5;
    position: absolute;
    top: -20px;
    left: -20px;
    width: 120%;
    height: 120%;
    padding: 20px;
    background-repeat: no-repeat;
    background-position: center;
    background-size: cover;
    transition: 1s cubic-bezier(0.445, 0.05, 0.55, 0.95), opacity 5s 1s cubic-bezier(0.445, 0.05, 0.55, 0.95);
    pointer-events: none;
  }
  
  .card-info {
    padding: 20px;
    position: absolute;
    bottom: 0;
    color: #fff;
    transform: translateY(40%);
    transition: 0.6s 1.6s cubic-bezier(0.215, 0.61, 0.355, 1);
  }
  .card-info p {
    opacity: 0;
    text-shadow: black 0 2px 3px;
    transition: 0.6s 1.6s cubic-bezier(0.215, 0.61, 0.355, 1);
  }
  .card-info * {
    position: relative;
    z-index: 1;
  }
  .card-info:after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    z-index: 0;
    width: 100%;
    height: 100%;
    background-image: linear-gradient(to bottom, transparent 0%, rgba(0, 0, 0, 0.6) 100%);
    background-blend-mode: overlay;
    opacity: 0;
    transform: translateY(100%);
    transition: 5s 1s cubic-bezier(0.445, 0.05, 0.55, 0.95);
  }
  
  .card-info h1 {
    font-family: "Playfair Display";
    font-size: 36px;
    font-weight: 700;
    text-shadow: rgba(0, 0, 0, 0.5) 0 10px 10px;
  }
  

//javascript

Vue.config.devtools = true;

Vue.component("card", {
  template: `
    <div
    ref="parallaxCard"
    class="parallax-card-wrapper"
    @mousemove="handleMouseMove"
    @mouseenter="handleMouseEnter"
    @mouseleave="handleMouseLeave"
  >
    <div class="card" :style="cardStyle">
      <div class="card-bg" :style="[cardBgTransform, cardBgImage]"></div>
      <div class="card-info">
        <slot name="header"></slot>
        <slot name="content"></slot>
      </div>
    </div>
  </div>`,
  mounted() {
    this.width = this.$refs.parallaxCard.offsetWidth;
    this.height = this.$refs.parallaxCard.offsetHeight;
  },
  props: ["dataImage"],
  data: () => ({
    /**
     * chiều rộng của card
     */
    width: 0,

    /**
     * chiều cao của card
     */
    height: 0,

    /**
     * Tọa độ con trỏ chuột đối với tâm của card theo trục Ox
     */
    mouseX: 0,

    /**
     * Tọa độ con trỏ chuột đối với tâm của card theo trục Oy
     */
    mouseY: 0,

    mouseLeaveDelay: null
  }),
  computed: {
    /**
     * Lấy ra tọa độ theo tỉ lệ đối với chiều dài của thẻ
     * -0.5 < mousePX < 0.5
     */
    mousePX() {
      return this.mouseX / this.width;
    },

    /**
     * Lấy ra tọa độ theo tỉ lệ đối với chiều cao của thẻ
     * -0.5 < mousePY < 0.5
     */
    mousePY() {
      return this.mouseY / this.height;
    },

    /**
     * Xử lý rotate card tùy theo tọa độ con trỏ chuột
     * -15 < rX < 15
     * -15 < rY < 15
     * @author hngiap 12.03.2020
     */
    cardStyle() {
      const rX = this.mousePX * 30;
      const rY = this.mousePY * -30;
      return {
        transform: `rotateY(${rX}deg) rotateX(${rY}deg)`
      };
    },

    cardBgTransform() {
      const tX = this.mousePX * -40;
      const tY = this.mousePY * -40;
      return {
        transform: `translateX(${tX}px) translateY(${tY}px)`
      };
    },
    cardBgImage() {
      return {
        backgroundImage: `url(${this.dataImage})`
      };
    }
  },
  methods: {
    // Xử lý sự kiện khi hover qua thẻ
    // - Tính toán tọa độ chuột đối với tâm O của thẻ
    handleMouseMove(e) {
      const me = this;
      let parallaxCard = me.$refs.parallaxCard;
      if (parallaxCard) {
        me.mouseX = e.pageX - parallaxCard.offsetLeft - me.width / 2;
        me.mouseY = e.pageY - parallaxCard.offsetTop - me.height / 2;
      }
    },

    handleMouseEnter() {
      clearTimeout(this.mouseLeaveDelay);
    },
    // reset trạng thái của thẻ về ban đầu
    handleMouseLeave() {
      this.mouseLeaveDelay = setTimeout(() => {
        this.mouseX = 0;
        this.mouseY = 0;
      }, 1000);
    }
  }
});

const app = new Vue({
  el: "#app"
});